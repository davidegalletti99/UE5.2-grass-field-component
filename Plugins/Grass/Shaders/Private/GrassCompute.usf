#pragma once
#include "/Engine/Public/Platform.ush"
#include "GrassUtils.ush"

uint NumIndices;
uint GrassDataSize;
float4x4 VP_MATRIX;
float CutoffDistance;
float3 CameraPosition;
int bIsCullingEnabled;

// IndirectArgsBuffer
StructuredBuffer<uint> IndirectArgsBuffer;
RWStructuredBuffer<uint> RWIndirectArgsBuffer;

// GrassDataBuffer
StructuredBuffer<FPackedGrassData> GrassDataBuffer;

// CulledGrassDataBuffer
StructuredBuffer<FPackedGrassData> CulledGrassDataBuffer;
RWStructuredBuffer<FPackedGrassData> RWCulledGrassDataBuffer;

// InstanceBuffer
RWStructuredBuffer<FGrassInstance> RWInstanceBuffer;

/**
 * Initialise the indirect args for the final culled indirect draw call.
 */
[numthreads(1, 1, 1)]
void InitIndirectArgsCS()
{
    RWIndirectArgsBuffer[0] = NumIndices;
    RWIndirectArgsBuffer[1] = 0; // Increment this counter during CullInstancesCS.
    RWIndirectArgsBuffer[2] = 0;
    RWIndirectArgsBuffer[3] = 0;
    RWIndirectArgsBuffer[4] = 0;
}


[numthreads(MAX_THREADS_PER_GROUP, 1, 1)]
void CullInstancesCS(
    uint3 DispatchThreadId : SV_DispatchThreadID)
{
    const uint GrassIndex = DispatchThreadId.x;
    if (GrassIndex >= GrassDataSize)
        return;
    
    const FPackedGrassData PackedGrassData = GrassDataBuffer[GrassIndex];
    const FGrassData Data = Unpack(PackedGrassData);

    float4 Planes[5];
    ComputeFrustumPlanes(transpose(VP_MATRIX), Planes);
    // const bool InView = IsInViewFrustum(Data.Position, VP_MATRIX, 0.2f);
    const bool InView = PlaneTestAABB(Planes, Data.Position, float3(Data.Width / 2, 1, Data.Height));
    const bool WithinDistance = distance(CameraPosition.xyz, Data.Position) < CutoffDistance;

    if ((InView && WithinDistance) || !bIsCullingEnabled)
    {
        uint WriteIndex;
        InterlockedAdd(RWIndirectArgsBuffer[1], 1, WriteIndex);
        RWCulledGrassDataBuffer[WriteIndex] = PackedGrassData;
    }
}

[numthreads(MAX_THREADS_PER_GROUP, 1, 1)]
void ComputeInstanceGrassDataCS(
    uint3 DispatchThreadId : SV_DispatchThreadID)
{
    const uint GrassIndex = DispatchThreadId.x;
    if (GrassIndex >= RWIndirectArgsBuffer[1])
        return;

    const FGrassData Data = Unpack(CulledGrassDataBuffer[GrassIndex]);
    
    FGrassInstance Instance = (FGrassInstance) 0;
    Instance.RotScaleMatrix = transpose(ComputeTransformMatrixNoTranslation(Data));
    Instance.InstanceOrigin = Data.Position;
    
    RWInstanceBuffer[GrassIndex] = Instance;
}