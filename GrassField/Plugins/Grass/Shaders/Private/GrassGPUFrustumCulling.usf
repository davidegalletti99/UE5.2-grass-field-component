#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

#include "GrassUtils.ush"

#define NUM_THREAD_GROUPS_X 64

RWStructuredBuffer<uint> ArgsBuffer;
StructuredBuffer<FGrassData> GrassDataBuffer;
RWStructuredBuffer<uint> VoteBuffer;
RWStructuredBuffer<uint> ScanBuffer;
RWStructuredBuffer<uint> GroupSumArray;
RWStructuredBuffer<uint> GroupSumArrayIn;
RWStructuredBuffer<uint> GroupSumArrayOut;
RWStructuredBuffer<FGrassData> CulledGrassOutputBuffer;

float4x4 MATRIX_VP;
float4 CameraPosition;
groupshared uint temp[2 * NUM_THREAD_GROUPS_X];
groupshared uint grouptemp[2 * 1024];
float Distance;
int NumOfGroups;
static float margin = 0.2;

[numthreads(128, 1, 1)]
void Vote(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
    float4 position = float4(GrassDataBuffer[DispatchThreadId.x].Position, 1.0f);

    float4 viewspace = mul(position, MATRIX_VP);
    
	float3 clipspace = viewspace.xyz;
	clipspace /= viewspace.w;

	clipspace.xy = clipspace.xy / 2.0f + 0.5f;
    
    bool inView =  clipspace.x >= 0.0f - margin && clipspace.x <= 1.0f + margin
                && clipspace.y >= 0.0f - margin && clipspace.y <= 1.0f + margin
                && clipspace.z >= 0.0f          && clipspace.z <= 1.0f;
    bool withinDistance = distance(CameraPosition.xyz, position.xyz) < Distance;

    VoteBuffer[DispatchThreadId.x] = inView * withinDistance;
}

// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(NUM_THREAD_GROUPS_X, 1, 1)]
void Scan(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
    int tid = (int) DispatchThreadId.x;
    int groupTID = (int) GroupThreadId.x;
    int groupID = (int) GroupId.x;

    int offset = 1;
    temp[2 * groupTID] = VoteBuffer[2 * tid];
    temp[2 * groupTID + 1] = VoteBuffer[2 * tid + 1];
    int d;
    int numElements = 2 * NUM_THREAD_GROUPS_X;

    for (d = numElements >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            temp[bi] += temp[ai];
        }

        offset *= 2;
    }

    if (groupTID == 0)
    {
        GroupSumArray[groupID] = temp[numElements - 1];
        temp[numElements - 1] = 0;
    }

    for (d = 1; d < numElements; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (groupTID < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    ScanBuffer[2 * tid] = temp[2 * groupTID];
    ScanBuffer[2 * tid + 1] = temp[2 * groupTID + 1];
}


// From GPU Gems Chapter 39 'Parallel Prefix Sum (Scan) with CUDA'
[numthreads(1024, 1, 1)]
void ScanGroupSums(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
    int tid = (int) DispatchThreadId.x;
    int groupTID = (int) GroupThreadId.x;
    int groupID = (int) GroupId.x;

    int offset = 1;
    grouptemp[2 * groupTID] = GroupSumArrayIn[2 * tid];
    grouptemp[2 * groupTID + 1] = GroupSumArrayIn[2 * tid + 1];
    int d;

    for (d = NumOfGroups >> 1; d > 0; d >>= 1)
    {
        GroupMemoryBarrierWithGroupSync();

        if (groupTID < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            grouptemp[bi] += grouptemp[ai];
        }

        offset *= 2;
    }

    if (tid == 0)
        grouptemp[NumOfGroups - 1] = 0;

    for (d = 1; d < NumOfGroups; d *= 2)
    {
        offset >>= 1;

        GroupMemoryBarrierWithGroupSync();
        if (tid < d)
        {
            int ai = offset * (2 * groupTID + 1) - 1;
            int bi = offset * (2 * groupTID + 2) - 1;
            int t = grouptemp[ai];
            grouptemp[ai] = grouptemp[bi];
            grouptemp[bi] += t;
        }
    }

    GroupMemoryBarrierWithGroupSync();

    GroupSumArrayOut[2 * tid] = grouptemp[2 * tid];
    GroupSumArrayOut[2 * tid + 1] = grouptemp[2 * tid + 1];
}

[numthreads(128, 1, 1)]
void Compact(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
	uint tid = DispatchThreadId.x;
	uint groupID = GroupThreadId.x;
	uint groupSum = GroupId.x > 0 ? GroupSumArray[GroupId.x] : 0;
	bool inCamera = VoteBuffer[tid];
    
	if (inCamera == 1)
	{
		InterlockedAdd(ArgsBuffer[1], 1);
		CulledGrassOutputBuffer[ScanBuffer[tid] + groupSum] = GrassDataBuffer[tid];
	}
}


[numthreads(1, 1, 1)]
void ResetArgs(uint3 id : SV_DISPATCHTHREADID)
{
    [unroll]
    for (int i = 0; i < 5; i++)
        ArgsBuffer[i] = (uint) 0;
}