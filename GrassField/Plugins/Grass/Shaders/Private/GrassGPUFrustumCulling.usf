#include "/Engine/Public/Platform.ush"

#define NUM_THREAD_GROUPS_X 64

Buffer<float4> _GrassDataBuffer;
RWBuffer<uint> _VoteBuffer;
RWBuffer<uint> _ScanBuffer;
RWBuffer<uint> _ArgsBuffer;
RWBuffer<uint> _GroupSumArray;
RWBuffer<uint> _GroupSumArrayIn;
RWBuffer<uint> _GroupSumArrayOut;
Buffer<float4> _CulledGrassOutputBuffer;


float4x4 MATRIX_VP;
int _NumOfGroups;

groupshared uint temp[2 * NUM_THREAD_GROUPS_X];
groupshared uint grouptemp[2 * 1024];

float4 _CameraPosition;
float _Distance;



[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void Vote(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
	
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void Scan(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
	
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void ScanGroupSums(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
	
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void Compact(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID,
	uint3 GroupId : SV_GroupID,
	uint GroupIndex : SV_GroupIndex)
{
	
}