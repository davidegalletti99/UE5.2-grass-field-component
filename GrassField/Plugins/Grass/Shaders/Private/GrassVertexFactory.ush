// Copyright Epic Games, Inc. All Rights Reserved.
#pragma once

#if defined(__RESHARPER__) || defined(__INTELLISENSE__)
#define USE_INSTANCING 1
#define NUM_TEX_COORD_INTERPOLATORS 1
#define NUM_MATERIAL_TEXCOORDS_VERTEX 1
#define COMPUTESHADER 1
#define RAYHITGROUPSHADER 1

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/VertexFactoryCommon.ush"
#include "/Engine/Private/MaterialTemplate.ush"
#endif

#include "/Engine/Private/VertexFactoryCommon.ush"
#include "GrassVertexFactoryCommon.ush"
#include "GrassUtils.ush"

#if USE_INSTANCING
StructuredBuffer<FGrassInstance> InstanceBuffer;
uint InstanceNumVertices;
float3 LodViewOrigin;
#endif


// *********************************************************************************************************************
// ****************************************** Vertex Factory Interface *************************************************
// *********************************************************************************************************************

/** Get ID in the GPU Scene. */
uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return GetPrimitiveId(Interpolants);
}

/** Compute the intermediates for a given vertex. */
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
    FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
    Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
#if USE_INSTANCING
    const FGrassInstance InstanceData = InstanceBuffer[Input.InstanceId];
    
    
    Intermediates.InstanceTransform1 = float4(InstanceData.RotScaleMatrix[0], 0);
    Intermediates.InstanceTransform2 = float4(InstanceData.RotScaleMatrix[1], 0);
    Intermediates.InstanceTransform3 = float4(InstanceData.RotScaleMatrix[2], 0);
    Intermediates.InstanceOrigin     = float4(InstanceData.InstanceOrigin, 1.0);

     
#endif // USE_INSTANCING
    
    float TangentSign = 1.0f;//UnpackNormal(Input.TangentZ).w;
    Intermediates.TangentToLocal = CalcTangentToLocal(Input, TangentSign);
    Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
    Intermediates.TangentToWorldSign = TangentSign * GetInstanceData(Intermediates).DeterminantSign;
    
    return Intermediates;
}

/**
 * Converts from vertex factory specific input to a FMaterialVertexParameters,
 * which is used by vertex shader material inputs.
 */
FMaterialVertexParameters GetMaterialVertexParameters(
    FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates,
    float3 WorldPosition, half3x3 TangentToLocal)
{
    FMaterialVertexParameters Result = (FMaterialVertexParameters) 0;
    
    Result.WorldPosition = WorldPosition;
    Result.TangentToWorld = Intermediates.TangentToWorld;
    Result.SceneData = Intermediates.SceneData;
    Result.PrimitiveId = Intermediates.SceneData.PrimitiveId;
    
    Result.PreSkinnedPosition = WorldPosition;
    Result.PreSkinnedNormal = TangentToLocal[2]; //TangentBias(Input.TangentZ.xyz);

#if USE_INSTANCING
    FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);
    
	float4x4 InstanceToLocal = GetInstanceTransform(Intermediates);
	Result.InstanceLocalToWorld = LWCMultiply(InstanceToLocal, PrimitiveData.LocalToWorld);
	Result.InstanceLocalPosition = Input.Position;
	Result.InstanceId = GetInstanceId(Input.InstanceId);
	Result.PrevFrameLocalToWorld = LWCMultiply(GetInstancePrevTransform(Intermediates), PrimitiveData.PreviousLocalToWorld);
	// Calculate derived world to local
	{
		float3 Scale2;
		Scale2.x = length2(InstanceToLocal[0].xyz);
		Scale2.y = length2(InstanceToLocal[1].xyz);
		Scale2.z = length2(InstanceToLocal[2].xyz);

		float3 InvNonUniformScale = rsqrt(Scale2);

		float4x4 LocalToInstance = InstanceToLocal;
		LocalToInstance[0].xyz	*= Pow2(InvNonUniformScale.x);
		LocalToInstance[1].xyz	*= Pow2(InvNonUniformScale.y);
		LocalToInstance[2].xyz	*= Pow2(InvNonUniformScale.z);
		LocalToInstance[3].xyz	 = 0.0f;
		LocalToInstance			 = transpose(LocalToInstance);
		LocalToInstance[3].xyz	 = mul(float4(-InstanceToLocal[3].xyz, 0.0f), LocalToInstance).xyz;

		Result.InstanceWorldToLocal = LWCMultiply(PrimitiveData.WorldToLocal, LocalToInstance);
	}
#else
    Result.PrevFrameLocalToWorld = GetInstancePrevTransform(Intermadiates);//GetInstanceData(Intermediates).PrevLocalToWorld;
#endif // USE_INSTANCING
    
#if NUM_MATERIAL_TEXCOORDS_VERTEX
    UNROLL

    for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
    {
        Result.TexCoords[CoordinateIndex] = UnpackUV(Input.UV);
    }
#endif  //NUM_MATERIAL_TEXCOORDS_VERTEX

    return Result;
}

/** Constructs values that need to be interpolated from the vertex shader to the pixel shader. */
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
    // Initialize the whole struct to 0
    // Really only the last two components of the packed UVs have the opportunity to be uninitialized
    FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS) 0;
#if NUM_TEX_COORD_INTERPOLATORS
    float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
    GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
    GetCustomInterpolators(VertexParameters, CustomizedUVs);

    UNROLL
    for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
    {   
        SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
    }
#endif
    
    SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
    SetPrimitiveId(Interpolants, Intermediates.SceneData.PrimitiveId);

    
#if USES_PER_INSTANCE_CUSTOM_DATA && VF_USE_PRIMITIVE_SCENE_DATA
    Interpolants.CustomDataOffset = Intermediates.SceneData.InstanceData.CustomDataOffset;
    Interpolants.CustomDataCount  = Intermediates.SceneData.InstanceData.CustomDataCount;
#endif
    
    return Interpolants;
}

#if USE_INSTANCING
// We do not use the hit proxy for instanced meshes
float4 VertexFactoryGetInstanceHitProxyId(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    return float4(0, 0, 0, 0);
}
#endif // USE_INSTANCING

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
    FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
    UNROLL
    for (uint CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
    {
        Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
    }
#endif // NUM_TEX_COORD_INTERPOLATORS
    
    const half3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	const half4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
    
    Result.WorldTangent = TangentToWorld0;
    Result.WorldNormal = TangentToWorld2.xyz;
	Result.UnMirrored = TangentToWorld2.w;

    Result.TwoSidedSign = 1;
    Result.PrimitiveId = GetPrimitiveId(Interpolants);
    
    Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
    
    return Result;
}

#if USE_INSTANCING
float4 CalcWorldPosition(float4 Position, float4x4 InstanceTransform, FLWCMatrix LocalToWorld)
{
    return TransformLocalToTranslatedWorld(mul(Position, InstanceTransform).xyz, LocalToWorld);
}
#else
float4 CalcWorldPosition(float4 Position, FLWCMatrix LocalToWorld)
{
    return TransformLocalToTranslatedWorld(Position.xyz, LocalToWorld);
}
#endif // USE_INSTANCING

/** Get the 3x3 tangent basis vectors for this vertex factory. This vertex factory will calculate the binormal on-the-fly. */
half3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.TangentToLocal;
}

/** Computes the world space position of this vertex. */
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    FLWCMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;
    
#if USE_INSTANCING
    
    return CalcWorldPosition(float4(Input.Position, 1.0), GetInstanceTransform(Intermediates), LocalToWorld);
#else
    return CalcWorldPosition(float4(Input.Position, 1.0), LocalToWorld);
#endif	// USE_INSTANCING
}

/** Computes the world space position of this vertex. */
float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
    return InWorldPosition;
}

/** Computes the world space position used by vertex lighting for this vertex. */
float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
    return TranslatedWorldPosition;
}

/** Computes the world space normal of this vertex. */
float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToWorld[2];
}

/** Computes the world space position of this vertex last frame. */
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
    FLWCMatrix PreviousLocalToWorld = GetInstanceData(Intermediates).PrevLocalToWorld;
    float4 PrevLocalPosition = float4(Input.Position, 1.0f);
#if USE_INSTANCING
    {
		const float4x4 InstanceTransform = GetInstancePrevTransform(Intermediates);
		PrevLocalPosition = mul(float4(Input.Position, 1.0f), InstanceTransform);
    }
#endif
    return TransformPreviousLocalPositionToTranslatedWorld(PrevLocalPosition.xyz, PreviousLocalToWorld);
}

/** Get the translated bounding sphere for this primitive. */
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    FPrimitiveSceneData PrimitiveData = GetPrimitiveData(GetPrimitiveId(Interpolants));
    return float4(LWCToFloat(LWCAdd(PrimitiveData.ObjectWorldPosition, ResolvedView.PreViewTranslation)), PrimitiveData.ObjectRadius);
}


#include "/Engine/Private/VertexFactoryDefaultInterface.ush"