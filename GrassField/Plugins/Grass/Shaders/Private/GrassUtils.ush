#pragma once

#include "GrassCommon.ush"

/*
uint ComputeVertexBufferSize(const uint NumLod)
{
    // Sum(i : 0 -> NumLod) (( i + 1 ) * 2 + 1)
    return (NumLod + 3) * (NumLod + 1);
}
uint ComputeIndexBufferSize(const uint NumLod)
{
    // Sum(i : 0 -> NumLod) ( i * 2 + 1) * 6
    return (NumLod + 1) * (NumLod + 1) * 2 * 3;
}

uint ComputeVertexBufferOffset(const uint NumLod)
{
    return NumLod * (NumLod + 2);
}

uint ComputeIndexBufferOffset(const uint NumLod)
{
    return (NumLod * NumLod) * 2 * 3;
}
*/

float3 RotateZ(const float Angle, const float3 Vec)
{
    const float3x3 Rot = ROTATION_MATRIX_Z_3X3(Angle);
    return mul(Rot, Vec);
}


float4x4 ComputeLookAtMatrix(const float3 Eye, const float3 Target, const float3 Up)
{
    const float3 ZAxis = normalize(Eye - Target);
    const float3 XAxis = normalize(cross(Up, ZAxis));
    const float3 YAxis = cross(ZAxis, XAxis);

    float4x4 LookAtMatrix = RIGHT_HANDED_MATRIX_4X4(XAxis, YAxis, ZAxis);
    LookAtMatrix[3] = float4(-dot(XAxis, Eye), -dot(YAxis, Eye), -dot(ZAxis, Eye), 1);
    
    return LookAtMatrix;
}

float4x4 ComputeAxisMatrixRotation(const float3x3 PrevAxis, const float3x3 NextAxis)
{
    const float3x3 RotationMatrix = mul(transpose(NextAxis), PrevAxis);
    return RIGHT_HANDED_MATRIX_4X4(RotationMatrix[0], RotationMatrix[1], RotationMatrix[2]);
}

// https://gamedev.stackexchange.com/questions/26084/how-to-get-the-rotation-matrix-to-transform-between-two-3d-cartesian-coordinate
// compute the rotation matrix that transform PrevAxis to NextAxis (No Translation)
float3x3 ComputeCoordinateSystemRotationMatrix(const float3x3 PrevAxis, const float3x3 NextAxis)
{
    // Rotation matrices are orthonormal, so we can use transpose instead of inverse
    const float3x3 RotationMatrix = mul(NextAxis, transpose(PrevAxis));
    return RotationMatrix;
}

// compute the rotation matrix that transform PrevAxis to NextAxis
float4x4 ComputeCoordinateSystemRotationMatrix(const float4x4 PrevAxis, const float4x4 NextAxis)
{
    const float3 NextAxisTranslation = EXTRACT_COLUMN(NextAxis, w);
    const float3 PrevAxisTranslation = EXTRACT_COLUMN(PrevAxis, w);

    const float3 FromPrevToNextTranslation = NextAxisTranslation - PrevAxisTranslation;

    const float3x3 NextAxisRotation = EXTRACT_MATRIX_3X3(NextAxis);
    const float3x3 PrevAxisRotation = EXTRACT_MATRIX_3X3(PrevAxis);

    const float3 NextXAxis = EXTRACT_COLUMN(NextAxisRotation, x);
    const float3 NextYAxis = EXTRACT_COLUMN(NextAxisRotation, y);
    const float3 NextZAxis = EXTRACT_COLUMN(NextAxisRotation, z);

    const float3x3 RotationMatrix = ComputeCoordinateSystemRotationMatrix(PrevAxisRotation, NextAxisRotation);
    
    return float4x4(
            float4(RotationMatrix[0], -dot(NextXAxis, FromPrevToNextTranslation)),
            float4(RotationMatrix[1], -dot(NextYAxis, FromPrevToNextTranslation)),
            float4(RotationMatrix[2], -dot(NextZAxis, FromPrevToNextTranslation)),
            float4(0,      0,      0,                                         1));
}

// https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula
float4x4 ComputeAToBRotationMatrix(const float3 A, const float3 B)
{
    const float3 Vec = cross(A, B);
    const float Cosine = dot(A, B);
    const float Sine = length(Vec);

    const float3x3 SkewMat = CROSS_PRODUCT_MATRIX_3X3(Vec);
    const float3x3 SkewMat2 = mul(SkewMat, SkewMat);
    const float3x3 RotationMat =  IDENTITY_MATRIX_3X3 + SkewMat * Sine + SkewMat2 * (1 - Cosine);
    
    return float4x4(
            float4(RotationMat[0], 0),
            float4(RotationMat[1], 0),
            float4(RotationMat[2], 0),
            float4(0,    0,     0, 1));
}

float4x4 ComputeTransformRotationMatrix(const FGrassData Data)
{
    const float3 ZAxis = Data.Up;
    const float3 YAxis = Data.Facing;
    const float3 XAxis = cross(YAxis, ZAxis);
    
    return RIGHT_HANDED_MATRIX_4X4(XAxis, YAxis, ZAxis);
}

float4x4 ComputeTransformMatrixNoScale(FGrassData Data)
{
    const float4x4 RotationMatrix = ComputeTransformRotationMatrix(Data);
    const float4x4 TranslationMatrix = TRANSLATION_MATRIX_4X4(Data.Position);
    
    return mul(TranslationMatrix, RotationMatrix);
}

float4x4 ComputeTransformMatrix(FGrassData Data)
{
    const float3 ScaleVector = float3(Data.Width, Data.Width, Data.Height);
    
    const float4x4 ScaleMatrix = SCALE_MATRIX_4X4(ScaleVector);
    const float4x4 RotationMatrix = ComputeTransformRotationMatrix(Data);
    const float4x4 TranslationMatrix = TRANSLATION_MATRIX_4X4(Data.Position);

    const float4x4 ScaleAndRotation = mul(RotationMatrix, ScaleMatrix);
    const float4x4 Result = mul(TranslationMatrix, ScaleAndRotation);
    
    return Result;
}

float4x4 ComputeInverseTransformMatrix(FGrassData Data)
{
    const float3 ScaleVector = 1 / float3(Data.Width, Data.Width, Data.Height);
    
    const float4x4 ScaleMatrix = SCALE_MATRIX_4X4(ScaleVector);
    const float4x4 RotationMatrix = transpose(ComputeTransformRotationMatrix(Data));
    const float4x4 TranslationMatrix = TRANSLATION_MATRIX_4X4(-Data.Position);

    const float4x4 TranslationAndRotation = mul(RotationMatrix, TranslationMatrix);
    const float4x4 Result = mul(ScaleMatrix, TranslationAndRotation);
    
    return Result;
}

float4x4 ComputeInverseNoTranslationTransformMatrix(FGrassData Data)
{
    const float3 ScaleVector = 1 / float3(Data.Width, Data.Width, Data.Height);
    
    const float4x4 ScaleMatrix = SCALE_MATRIX_4X4(ScaleVector);
    const float4x4 RotationMatrix = transpose(ComputeTransformRotationMatrix(Data));
    const float4x4 Result = mul(ScaleMatrix, RotationMatrix);
    
    return Result;
}

void ComputeTransformationMatrixAndInverse(
    out float4x4 TransformationMatrix,
    out float4x4 InvTransformationMatrix,
    FGrassData Data)
{
    TransformationMatrix = ComputeTransformMatrix(Data);
    InvTransformationMatrix = ComputeInverseTransformMatrix(Data);
}

void ComputeFrustumPlanes(
        const float4x4 ViewProjectionMatrix,
        inout float4 Planes[6])
{
    Planes[0] = ViewProjectionMatrix[3] + ViewProjectionMatrix[0];
    Planes[1] = ViewProjectionMatrix[3] - ViewProjectionMatrix[0];
    Planes[2] = ViewProjectionMatrix[3] + ViewProjectionMatrix[1];
    Planes[3] = ViewProjectionMatrix[3] - ViewProjectionMatrix[1];
    Planes[4] = ViewProjectionMatrix[3] + ViewProjectionMatrix[2];
    Planes[5] = ViewProjectionMatrix[3] - ViewProjectionMatrix[2];
}

/** Return false if the AABB is completely outside one of the planes. */
bool PlaneTestAABB(in float4 InPlanes[5], in const float3 InCenter, in const float3 InExtent)
{
    bool bPlaneTest = true;
	
	[unroll]
    for (uint PlaneIndex = 0; PlaneIndex < 5; ++PlaneIndex)
    {
        float3 PlaneSigns;
        PlaneSigns.x = InPlanes[PlaneIndex].x >= 0.f ? 1.f : -1.f;
        PlaneSigns.y = InPlanes[PlaneIndex].y >= 0.f ? 1.f : -1.f;
        PlaneSigns.z = InPlanes[PlaneIndex].z >= 0.f ? 1.f : -1.f;

        const bool bInsidePlane = dot(InPlanes[PlaneIndex], float4(InCenter + InExtent * PlaneSigns, 1.0f)) > 0.f;
        bPlaneTest = bPlaneTest && bInsidePlane;
    }

    return bPlaneTest;
}

bool IsInViewFrustum(in const float3 Position, in const float4x4 ViewProjectionMatrix, in const float Margin)
{
    // WordlSpace -> HomogenousSpace -> ViewSpace ( ClipSpace ) -> NDCSpace
    const float4 HomogenousPosition = float4(Position, 1.0f);
    const float4 ClipPosition = mul(HomogenousPosition, ViewProjectionMatrix);
    
    float3 NDCPosition = ClipPosition.xyz / ClipPosition.w;
    NDCPosition.xy = NDCPosition.xy / 2.0f + 0.5f;
    
    return NDCPosition.x >= 0.0f - Margin && NDCPosition.x <= 1.0f + Margin
        && NDCPosition.y >= 0.0f - Margin && NDCPosition.y <= 1.0f + Margin
        && NDCPosition.z >= 0.0f && NDCPosition.z <= 1.0f;
}