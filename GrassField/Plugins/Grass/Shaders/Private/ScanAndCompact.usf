#define MAX_SIZE 2048

void scan(
    uint threadIdx,
    in uint array[MAX_SIZE], 
    out uint scanArray[MAX_SIZE]
)
{
    uint i = 0;
    
    // up-scan
    [unroll]
    for (i = 2; i < MAX_SIZE / 2; i = i << 1)
    {
        uint id = threadIdx * i;
        
        if (id < MAX_SIZE)
        {
            uint idx = MAX_SIZE - id - 1;
            uint l = idx - i / 2;
            uint r = idx;
            
            scanArray[r] = array[r] + array[l];
        }
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (threadIdx == 0)
        scanArray[MAX_SIZE - 1] = 0;
    
    // down-scan
    [unroll]
    for (i = MAX_SIZE; i > 1; i = i >> 1)
    {
        uint id = threadIdx * i;
        
        if (id < MAX_SIZE)
        {
            uint idx = MAX_SIZE - id - 1;
            uint l = idx - i / 2;
            uint r = idx;
            
            uint tmp = scanArray[r];
            scanArray[r] = scanArray[r] + scanArray[l];
            scanArray[l] = tmp;
        }
        GroupMemoryBarrierWithGroupSync();
    }
}

void compact(
    in uint threadIdx,
    in uint array[MAX_SIZE], 
    in uint voteArray[MAX_SIZE], 
    in uint scanArray[MAX_SIZE], 
    out uint compArray[MAX_SIZE]
)
{
    if (voteArray[threadIdx] != 0)
    {
        uint idx = scanArray[threadIdx];
        compArray[idx] = array[threadIdx];
    }
    
    GroupMemoryBarrierWithGroupSync();
}

void scanAndCompact(
    in uint threadIdx, 
    in uint array[MAX_SIZE], 
    in uint voteArray[MAX_SIZE], 
    in uint scanArray[MAX_SIZE], 
    out uint compArray[MAX_SIZE]
)
{
    if (threadIdx == 0)
        scanArray = voteArray;
    
    GroupMemoryBarrierWithGroupSync();
    
    scan(threadIdx, voteArray, scanArray);
    
    if(threadIdx == 0)
        scanArray[MAX_SIZE - 1] = 0;
    
    GroupMemoryBarrierWithGroupSync();
    
    compact(threadIdx, array, voteArray, scanArray, compArray);
}