#pragma once

#include "/Engine/Private/Common.ush"
#include "GrassCommon.ush"


// *********************************************************************************************************************
// ****************************************** Vertex Factory Structures ************************************************
// *********************************************************************************************************************
/** Per-vertex inputs. No vertex buffers are bound. */
struct FVertexFactoryInput
{
	float3 Position                     : ATTRIBUTE0;
	uint UV	                            : ATTRIBUTE1;
	uint TangentX                       : ATTRIBUTE2;
	uint TangentZ                       : ATTRIBUTE3; // TangentZ.w contains sign of tangent basis determinant

#if USE_INSTANCING
	uint InstanceId	                    : SV_InstanceID;
#endif
	uint VertexId                       : SV_VertexID;
};

/**
 * Cached intermediates that would otherwise have to be computed multiple times.
 * Avoids relying on the compiler to optimize out redundant operations.
 */
struct FVertexFactoryIntermediates
{
	half3x3 TangentToLocal;
	half3x3 TangentToWorld;
	half TangentToWorldSign;
    
	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;

#if USE_INSTANCING
	float4 InstanceOrigin;
	float4 InstanceTransform1;
	float4 InstanceTransform2;
	float4 InstanceTransform3;
#endif // USE_INSTANCING
};

/**
 * Attributes to interpolate from the vertex shader to the pixel shader.
 */
struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK
	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
    
#if NUM_TEX_COORD_INTERPOLATORS
	float4 TexCoords[(NUM_TEX_COORD_INTERPOLATORS + 1) / 2] : TEXCOORD0;
#endif
    
#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};


// *********************************************************************************************************************
// ****************************************** Vertex Factory Utilities *************************************************
// *********************************************************************************************************************

/**
 * Get the instance data from the vertex factory input.
 */
FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.InstanceData;
}

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
    return Intermediates.SceneData.Primitive;
}

/**
 * Set the primitive ID in the interpolants
 */
void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
	Interpolants.PrimitiveId = PrimitiveId;
#endif
}

uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
#if VF_USE_PRIMITIVE_SCENE_DATA
    return Interpolants.PrimitiveId;
#else
    return 0;
#endif
}

/**
 * Set the tangent basis in the interpolants
 */
void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants,
    float3 InTangentToWorld0, float3 InTangentToWorld2,
    float InTangentToWorldSign)
{
    Interpolants.TangentToWorld0 = float4(InTangentToWorld0, 0);
    Interpolants.TangentToWorld2 = float4(InTangentToWorld2, InTangentToWorldSign);
}

/**
 * Get the Z axis from the tangent basis.
 */
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return Interpolants.TangentToWorld2;
}

/**
 * Get the X axis from the tangent basis.
 */
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
    return Interpolants.TangentToWorld0;
}

/**
 * Calculate the tangent to world matrix from the vertex factory intermediates.
 */
half3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
    half3x3 LocalToWorld = LWCToFloat3x3(GetInstanceData(Intermediates).LocalToWorld);
    half3 InvScale = GetInstanceData(Intermediates).InvNonUniformScale;
    LocalToWorld[0] *= InvScale.x;
    LocalToWorld[1] *= InvScale.y;
    LocalToWorld[2] *= InvScale.z;
    return mul(TangentToLocal, LocalToWorld); 
}

half3x3 CalcTangentToLocal(FVertexFactoryInput Input, inout float TangentSign)
{
    half3 TangentX = UnpackNormal(Input.TangentX).xyz;
    half4 TangentZ = UnpackNormal(Input.TangentZ);

    TangentSign = TangentZ.w;

    // derive the binormal by getting the cross product of the normal and tangent
    half3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
    // Recalculate TangentX off of the other two vectors
    // This corrects quantization error since TangentX was passed in as a quantized vertex input
    // The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
    half3x3 Result;
    Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
    Result[1] = TangentY;
    Result[2] = TangentZ.xyz;

    return Result;
}

#if USE_INSTANCING

half3x3 GetInstanceToLocal3x3(FVertexFactoryIntermediates Intermediates)
{
    return half3x3( Intermediates.InstanceTransform1.xyz,
                    Intermediates.InstanceTransform2.xyz,
                    Intermediates.InstanceTransform3.xyz);
}

float4x4 GetInstanceTransform(FVertexFactoryIntermediates Intermediates)
{
    return float4x4(
        float4(Intermediates.InstanceTransform1.xyz, 0.0f),
        float4(Intermediates.InstanceTransform2.xyz, 0.0f),
        float4(Intermediates.InstanceTransform3.xyz, 0.0f),
        float4(Intermediates.InstanceOrigin.xyz, 1.0f));
}

float4x4 GetInstancePrevTransform(FVertexFactoryIntermediates Intermediates)
{
    // Assumes instance transform never change, which means per-instance motion will cause TAA and motion blur artifacts.
    return GetInstanceTransform(Intermediates);
}

float3 GetInstanceOrigin(FVertexFactoryIntermediates Intermediates)
{
    const float3 Offset = mul(float3(0, 0, 0), GetInstanceToLocal3x3(Intermediates));
    return Intermediates.InstanceOrigin.xyz + Offset;
}
#endif	// USE_INSTANCING

half3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, half3x3 TangentToLocal)
{
#if USE_INSTANCING
    half3x3 InstanceToWorld = mul(GetInstanceToLocal3x3(Intermediates), LWCToFloat3x3(GetInstanceData(Intermediates).LocalToWorld));
    // remove scaling
    InstanceToWorld[0] = normalize(InstanceToWorld[0]);
    InstanceToWorld[1] = normalize(InstanceToWorld[1]);
    InstanceToWorld[2] = normalize(InstanceToWorld[2]);
    half3x3 TangentToWorld = mul(TangentToLocal, InstanceToWorld);
#else
    half3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);
#endif	// USE_INSTANCING
    return TangentToWorld;
}

#if NUM_TEX_COORD_INTERPOLATORS

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint UVIndex, float2 InValue)
{
    FLATTEN
    if (UVIndex % 2)
    {
        Interpolants.TexCoords[UVIndex / 2].zw = InValue;
    }
    else
    {
        Interpolants.TexCoords[UVIndex / 2].xy = InValue;
    }
}

float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, uint UVIndex)
{
    float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
    return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}
#endif

// void CalculateVertex(inout FVertexFactoryInput Vertex, uint NumVertices, FGrassInstance Data)
// {
// 	// MaxSteps = 1 + LODIndex
// 	const int MaxSteps = (NumVertices - 1) / 2;
// 	const int CurrentStep = Vertex.VertexId / 2;
// 	const int InStepVertexId = Vertex.VertexId % 2;
// 	const float Percentage = float(CurrentStep) / MaxSteps;
//
// 	//           0
// 	//           *
// 	//         /   \
// 	//       /       \
// 	//     /           \
// 	// -1 *-------------* 1
//     
// 	// -1 if the vertex is on the left side
// 	//  1 if it's on the right side
// 	//  0 if it's the vertex at the center
// 	const int VertexSide = (1 - 2 * InStepVertexId) * ceil(1 - Percentage);
//
// 	const float3 Normal = Data.Facing;
// 	const float3 Tangent = normalize(cross(Normal, Data.Up));
// 	const float Width = QUAD_BEZ(Data.Width / 2, Data.Width / 2 * 0.85, 0, Percentage);
//
// 	Vertex.Position = QUAD_BEZ(Data.V0, Data.V1, Data.V2, Percentage);
// 	Vertex.Position += Tangent * Width * VertexSide;
//  
// 	Vertex.TangentX = Tangent;
// 	Vertex.TangentZ = float4(Normal, 1);
// 	Vertex.UV = float2(0.5 + VertexSide * 0.5, Percentage);
// }