#include "/Engine/Public/Platform.ush"

groupshared uint Array[1024];

// Parameter is SV_GroupIndex
void bitonicSort(in uint localIdxFlattened)
{
    uint numArray = 1024;
    uint numArrayPowerOfTwo = 2 << firstbithigh(numArray - 1);

    for (uint nMergeSize = 2; nMergeSize <= numArrayPowerOfTwo; nMergeSize = nMergeSize * 2)
    {
        for (uint nMergeSubSize = nMergeSize >> 1; nMergeSubSize > 0; nMergeSubSize = nMergeSubSize >> 1)
        {
            uint tmp_index = localIdxFlattened;
            uint index_low = tmp_index & (nMergeSubSize - 1);
            uint index_high = 2 * (tmp_index - index_low);
            uint index = index_high + index_low;

            uint nSwapElem = nMergeSubSize == nMergeSize >> 1 ? index_high + (2 * nMergeSubSize - 1) - index_low : index_high + nMergeSubSize + index_low;
			
            if (nSwapElem < numArray && index < numArray)
            {
                if (Array[index] < Array[nSwapElem])
                {
                    uint uTemp = Array[index];
                    Array[index] = Array[nSwapElem];
                    Array[nSwapElem] = uTemp;
                }
            }
            GroupMemoryBarrierWithGroupSync();
        }
    }
}