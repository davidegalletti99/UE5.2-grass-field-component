#pragma once

#define GRAVITATIONAL_ACCELERATION 9.81
#define PI 3.14159265359
#define SQ_2_PI 2.50662827463
#define FORWARD_VECTOR float3(0, 1, 0)
#define BACKWARD_VECTOR float3(0, -1, 0)

// Calcola la curva di BÃ©zier quadratica
#define QUAD_BEZ(p0, p1, p2, t) \
	(p0 * (1 - t) + 2 * p1 * t * (1 - t) + p2 * t * t)

#define CUBIC_BEZ(p0, p1, p2, p3, t) \
	(p0 * (1 - t) * (1 - t) * (1 - t) + 3 * p1 * t * (1 - t) * (1 - t) + 3 * p2 * t * t * (1 - t) + p3 * t * t * t)

#define GAUSSIAN_MAP(m, s, x) \
	(exp(-(x - m) * (x - m) / (2 * s * s)) / (s * SQ_2_PI))

# define DERIVATIVE_QUAD_BEZ(p0, p1, p2, t) \
	(2 * ((1 - t) * (p1 - p0) + t * (p2 - p1)))

#define EXTRACT_COLUMN(Matrix, ColumnName) \
	float3(Matrix[0].ColumnName, Matrix[1].ColumnName, Matrix[2].ColumnName)

#define EXTRACT_MATRIX_3X3(Matrix) \
		float3x3( \
		Matrix[0].xyz, \
		Matrix[1].xyz, \
		Matrix[2].xyz)

#define RIGHT_HANDED_MATRIX_3X3(C1, C2, C3) \
		float3x3( \
		float3(C1.x, C2.x, C3.x), \
		float3(C1.y, C2.y, C3.y), \
		float3(C1.z, C2.z, C3.z))

#define RIGHT_HANDED_MATRIX_4X4(C1, C2, C3) \
		float4x4( \
		float4(C1.x, C2.x, C3.x, 0), \
		float4(C1.y, C2.y, C3.y, 0), \
		float4(C1.z, C2.z, C3.z, 0), \
		float4(   0,    0,    0, 1))

#define IDENTITY_MATRIX_3X3 float3x3( \
        float3(1, 0, 0), \
        float3(0, 1, 0), \
        float3(0, 0, 1))

#define IDENTITY_MATRIX_3X3(Type, RowType) Type( \
		RowType(1, 0, 0), \
		RowType(0, 1, 0), \
		RowType(0, 0, 1))

#define IDENTITY_MATRIX_4X4 float4x4( \
        float4(1, 0, 0, 0), \
        float4(0, 1, 0, 0), \
        float4(0, 0, 1, 0), \
        float4(0, 0, 0, 1))

#define ROTATION_MATRIX_Z_3X3(angle) float3x3( \
        float3(cos(angle), -sin(angle), 0), \
        float3(sin(angle),  cos(angle), 0), \
        float3(         0,          0,  1))

#define ROTATION_MATRIX_Z_4X4(angle) float4x4( \
        float4(cos(angle), -sin(angle), 0, 0), \
        float4(sin(angle),  cos(angle), 0, 0), \
        float4(         0,           0, 1, 0), \
        float4(         0,           0, 0, 1))


#define CROSS_PRODUCT_MATRIX_3X3(vec) float3x3( \
        float3(     0, -vec.z,  vec.y), \
        float3( vec.z,      0, -vec.x), \
        float3(-vec.y,  vec.x,      0))


#define TRANSLATION_MATRIX_4X4(vec) float4x4( \
        float4(1, 0, 0, vec.x), \
        float4(0, 1, 0, vec.y), \
        float4(0, 0, 1, vec.z), \
        float4(0, 0, 0,     1))

#define SCALE_MATRIX_4X4(vec) float4x4( \
        float4(vec.x,      0,      0, 0), \
        float4(     0, vec.y,      0, 0), \
        float4(     0,      0, vec.z, 0), \
        float4(     0,      0,     0, 1))


struct FDisplacementInfo
{
	float3 PrevDisplacement;
	float3 CurrDisplacement;
};

struct FGrassBodyInfo
{
	float Mass;
	float3 Velocity;
	float3 Acceleration;
	float3 Position;
};

/** 
 * Struct per la generazione dei fili d'erba
 */
struct FGrassData
{
    uint Index;
    float3 Position;
	
	float3 Up;
    float3 Facing;
    
    float Height;
    float Width;
	float Stiffness;
};

struct FPackedGrassData
{
    uint Index;
    float3 Position;
	
	uint Up;
    uint Facing;

    uint HeightAndWidth;
	float Stiffness;
};

struct FGrassVertex
{
    float3 Position;
    float2 UV;
    
    float3 TangentX;
    float4 TangentZ; // TangentZ.w contains sign of tangent basis determinant
};

struct FPackedGrassVertex
{
	float3 Position;
	uint UV;
    
	uint TangentX;
	uint TangentZ; // TangentZ.w contains sign of tangent basis determinant
};

struct FGrassInstance
{
	float3x3 RotScaleMatrix;
	
	float3 V0;
	float3 V1;
	float3 V2;
	
	float3 PrevV1;
	float3 PrevV2;
};

struct FPackedGrassInstance
{
    float4x4 Transform;
	uint4 Positions;
};

/**
 * Pack a float4 normal into a uint.
 * @param Normal The float4 to pack.
 * @return The packed uint.
 */
uint PackNormal(const float4 Normal)
{
	float4 MappedNormal = (1 + Normal); // [-1, 1] -> [0, 2]
	MappedNormal *= 255.0f / 2.0f; // [0, 2] -> [0, 255]

	uint Out = 0;
	Out |= (uint(MappedNormal.x) << 24);
	Out |= (uint(MappedNormal.y) << 16);
	Out |= (uint(MappedNormal.z) << 8);
	Out |= (uint(MappedNormal.w) << 0);
	
	return Out;
}

uint PackNormal(const float3 Normal)
{
	return PackNormal(float4(Normal, 1.0f));
}

uint PackNormal(const float2 Normal)
{
	return PackNormal(float4(Normal, 0.0f, 1.0f));
}

/**
 * Unpack a uint into a float4 normal.
 * @param Normal The uint to unpack.
 * @return The unpacked float4.
 */
float4 UnpackNormal(const uint Normal)
{
	float4 Out = 0;
	Out.x = float((Normal & 0xff000000) >> 24);
	Out.y = float((Normal & 0x00ff0000) >> 16);
	Out.z = float((Normal & 0x0000ff00) >> 8);
	Out.w = float((Normal & 0x000000ff) >> 0);

	Out *= 2.0f / 255.0f;
	Out -= 1.0f;
	
	return Out;
}

/**
 * Pack a float2 UV into a uint.
 * @param UV The float2 to pack 
 * @return the packed uint.
 */
uint PackUV(const float2 UV)
{
	const uint MaxUint16 = 65535;
	float2 MappedUV = UV * MaxUint16; // [0, 1] -> [0, MaxUint16]

	uint Out = 0;
	Out |= (uint(MappedUV.x) << 16);
	Out |= (uint(MappedUV.y) << 0);
	
	return Out;
}

float2 UnpackUV(const uint UV)
{
	const uint MaxUint16 = 65535;
	float2 Out = 0;
	Out.x = float((UV & 0xffff0000) >> 16);
	Out.y = float((UV & 0x0000ffff) >> 0);

	Out /= MaxUint16;
	return Out;
}

uint PackHeightAndWidth(const float Height, const float Width)
{
	uint HeightAndWidth = 0;
	// prendo i 4 bit medno significativi dall'esponente e 12 dalla mantissa
	// 7    f    f    f    8    8    0    0
	// 0111 1111 1111 1111 1000 0000 0000 0000
	HeightAndWidth = (asuint(Height) & 0x7fff8000) << 1;
	HeightAndWidth |= (asuint(Width) & 0x7fff8000) >> 15;
	
	return HeightAndWidth;
}

/**
 * Unpack the Height and Width from the HeightAndWidth field of the packed data.
 * @param HeightAndWidth The HeightAndWidth field of the packed data.
 * @return float2(Height, Width)
 */
float2 UnpackHeightAndWidth(const uint HeightAndWidth)
{
	float2 HeightAndWidthF = 0;
	HeightAndWidthF.x = asfloat((HeightAndWidth & 0xffff0000) >> 1);
	HeightAndWidthF.y = asfloat((HeightAndWidth & 0x0000ffff) << 15);
    
	return HeightAndWidthF;
}


/*
 * Unpack the Facing from the Facing field of the packed data.
 * @param Facing The Facing field of the packed data.
 * @return the unpacked Facing.
 */
float2 UnpackFacing(const uint Facing)
{
	float2 FacingF = 0;
    
	const uint SignX = Facing & 0x80000000;
	const uint SignY = (Facing & 0x00008000) << 16;
	FacingF.x = asfloat(SignX | (Facing & 0x7fff0000) >> 1);
	FacingF.y = asfloat(SignY | (Facing & 0x00007fff) << 15);
    
	return FacingF;
}


/*
 * Pack the GrassData into a PackedGrassData.
 * @param InData The raw data.
 * @return The packed data.
 */
FPackedGrassData Pack(const FGrassData InData)
{
    FPackedGrassData OutData;
    
    OutData.Position = InData.Position;
    OutData.Index = InData.Index;
	
    OutData.Facing = PackNormal(InData.Facing);
	OutData.Up = PackNormal(InData.Up);

	OutData.HeightAndWidth = PackHeightAndWidth(InData.Height, InData.Width);
	OutData.Stiffness = InData.Stiffness;
    
    return OutData;
}

/*
 * Unpack the PackedGrassData into a LodGrassData.
 * @param InData The packed data.
 * @return The unpacked data.
 */
FGrassData Unpack(const FPackedGrassData InData)
{
    FGrassData OutData = (FGrassData) 0;
    
    OutData.Position = InData.Position;
    OutData.Index = InData.Index;
	
	float2 HeightAndWidth = UnpackHeightAndWidth(InData.HeightAndWidth);
    OutData.Height = HeightAndWidth.x;
	OutData.Width = HeightAndWidth.y;

	OutData.Facing = UnpackNormal(InData.Facing).xyz;
    OutData.Up = UnpackNormal(InData.Up).xyz;
	OutData.Stiffness = InData.Stiffness;
	
    return OutData;
}


uint4 PackPosition(const float3 V0, const float3 V1, const float3 V2)
{
	const float3 V0V1 = V1 - V0;
	const float3 V0V2 = V2 - V0;
	const float V0V1Length = length(V0V1);
	const float V0V2Length = length(V0V2);

	uint4 Out = 0;
	Out.x = PackNormal(normalize(V0V1)).x;
	Out.y = asuint(V0V1Length);
	Out.z = PackNormal(normalize(V0V2)).x;
	Out.w = asuint(V0V2Length);
	
	return Out;
}

float3x3 UnpackPosition(const uint4 PackedPosition, const float4x4 Transform)
{
	const float3 V0V1 = UnpackNormal(PackedPosition.x).xyz * asfloat(PackedPosition.y);
	const float3 V0V2 = UnpackNormal(PackedPosition.z).xyz * asfloat(PackedPosition.w);
	
	float3x3 Out = 0;
	Out[0] = Transform[3].xyz;
	Out[1] = Out[0] + V0V1;
	Out[2] = Out[0] + V0V2;
	return Out;
}